Алгоритмы 2 и C++
Задача 1-4 - Максимальная повторяющаяся строка
Александр Сердитов

Ссылка на задание:
https://shad.contest.yandex.ru/contest/1100/problems/D/

Словесное описание алгоритма

1. Находим все тандемные повторы в строке с помощью алгоритма Крочемора. 
2. Находим максимальную повторяющуюся строку.

1. Поиск всех тандемных повторов осуществляется следующим алгоритмом:

l = 1
Вычислим все последовательности на уровне 1 и пометим их как малые
Пока существует малая последовательность на уровне l:
  Положим в out кратные строки с периодом l
  Вычислим декомпозицию последовательностей уровня l, используя только малые последовательности
  l++
  Найдем малые последовательности на уровне l

где l - уровень (l = 1 представляет последовательности из одного символа, l = 2 из двух символов и т.д.)

Алгоритм Крочемора позволяет найти все тандемные повторы в строке за время O(n log n), наивная реализация алгоритма за время O(n^2).

2. Находим максимальную повторяющуюся строку:

max_repeat_count = 0
for i, level in enumerate(levels):
  for tandem in level.tandems:
    prev_index = None
    repeat_count = 0
    for start_index in tandem.repeats:
      if not prev_index or prev_index + i == start_index:
        repeat_count += 1
      else:
        repeat_count = 1
      prev_index = start_index

    if repeat_count > max_repeat_count:
      max_repeat_count = repeat_count

Заметим, что максимально количество тандемных повторов в строке не может превышать O(n^2). Очевидным примером является строка, составленная из  одинаковых букв — в такой строке тандемным повтором является любая подстрока чётной длины, которых примерно (n^2)/4. Вообще, любая периодичная строка с коротким периодом (например, строка фибоначчи) будет содержать очень много тандемных повторов, но не более n^2. Обойти n^2 элементов возможно за время O(n^2) с использованием “наивного” алгоритма обхода.

Доказательство того, что алгоритм всегда завершается и корректно работает
Алгоритм завершается корректно по следующим причинам: алгоритм поиска тандемных повторов (алгоритм Крочемора) ограничен длиной строки и заканчивает работу, когда строка заканчивается. Очевидно, что количество уровней l, найденных в алгоритме Крочемора не может превышать количество символов в строке n. Алгоритм поиска максимальной повторяющейся строки ограничен количеством уровней l и количеством тандемных повторов внутри одного уровня. После обхода всех повторяющихся тандемных повторов всех уровней, он заканчивает свою работу.

Асимптотическая оценка времени работы алгоритма
Время на поиск всех тандемных повторов составит O (n log n). Время на поиск максимальной повторяющейся строки составит O (n^2), то есть общее время в худшем случае O(n^2).

Асимптотическая оценка памяти, потребляемой алгоритмом
Для хранения найденных тандемных повторов с помощью алгоритма Крочемора необходимо O (n) памяти, остальные затраты имеют меньший порядок и их можно опустить. Итоговая сложность составит O(n).

Литература:
Алгоритм Крочемора: http://neerc.ifmo.ru/wiki/index.php?title=%D0%90%D0%BB%D0%B3%D0%BE%D1%80%D0%B8%D1%82%D0%BC_%D0%9A%D1%80%D0%BE%D1%87%D0%B5%D0%BC%D0%BE%D1%80%D0%B0
Поиск всех тандемных повторов в строке. Алгоритм Мейна-Лоренца: http://e-maxx.ru/algo/string_tandems